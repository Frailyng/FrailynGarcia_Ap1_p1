@page "/RegistroClienteDetalle/Create"
@inject ClienteService ClienteService
@inject TiposTelefonoService TiposTelefonoService
@inject TelefonosService TelefonosService
@rendermode InteractiveServer

<EditForm Model="Cliente" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card shadow-lg">
        <div class="card-header">
            <h5 class="card-title">Registro de Clientes</h5>
        </div>

        <div class="card-body">
            <!-- ClienteId con botón de búsqueda solo con ícono -->
            <div class="row mb-3">
                <div class="col-md-10">
                    <label for="ClienteId" class="form-label">Código Cliente:</label>
                    <InputNumber @bind-Value="Cliente.ClienteId" class="form-control" style="font-size: 0.8em;" />
                </div>
                <div class="col-md-2 d-flex align-items-end">
                    <button class="btn btn-outline-primary btn-sm" type="button" @onclick="Buscar">
                        <i class="bi bi-search"></i>
                    </button>
                </div>
            </div>

            <!-- Nombres -->
            <div class="mb-3">
                <label for="Nombres" class="form-label">Nombres:</label>
                <InputText @bind-Value="Cliente.Nombres" class="form-control" />
                <ValidationMessage For="@(() => Cliente.Nombres)" />
            </div>

            <!-- RNC -->
            <div class="mb-3">
                <label for="Rnc" class="form-label">RNC:</label>
                <InputText @bind-Value="Cliente.Rnc" class="form-control" />
                <ValidationMessage For="@(() => Cliente.Rnc)" />
            </div>

            <!-- Dirección -->
            <div class="mb-3">
                <label for="Direccion" class="form-label">Dirección:</label>
                <InputText @bind-Value="Cliente.Direccion" class="form-control" />
            </div>

            <!-- Límite de Crédito -->
            <div class="mb-3">
                <label for="LimiteCredito" class="form-label">Límite de Crédito:</label>
                <InputNumber @bind-Value="Cliente.LimiteCredito" class="form-control" />
            </div>

            <!-- Título: Teléfonos de Cliente -->
            <h5>Teléfonos de Cliente</h5>

            <!-- Filas para TipoTelefono y Telefono -->
            <div class="row mb-3">
                <!-- Input para TipoTelefono con datos del servicio -->
                <div class="col-md-6">
                    <label for="TipoTelefono" class="form-label">Tipo de Teléfono:</label>
                    <InputSelect @bind-Value="TipoTelefono.TipoId" class="form-control">
                        <option value="">Seleccione un tipo</option>
                        @foreach (var tipo in TiposTelefonos)
                        {
                            <option value="@tipo.TipoId">@tipo.Descripcion</option>
                        }
                    </InputSelect>
                </div>

                <!-- Input para Telefono con máscara -->
                <div class="col-md-6">
                    <label for="Telefono" class="form-label">Teléfono:</label>
                    <InputText @bind-Value="NuevoTelefono.NumeroTelefono" class="form-control"/>
                </div>
            </div>

            <!-- Botón azul para agregar teléfono -->
            <div class="d-flex justify-content-end mb-3">
                <button class="btn btn-primary btn-sm">
                    <i class="bi bi-plus"></i> Agregar
                </button>
            </div>

            <!-- Tabla para mostrar teléfonos agregados -->
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Tipo de Teléfono</th>
                        <th>Teléfono</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var telefono in TiposTelefonos)
                    {
                        <tr>
                            <td>@telefono.TipoId</td>
                            <td>@telefono.Descripcion</td>
                            <td>
                                <button class="btn btn-danger btn-sm">
                                    <i class="bi bi-trash"></i> Eliminar
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

            <!-- Cantidad de teléfonos -->
            <div class="mt-3">
                <label for="CantidadTelefonos" class="form-label">Cantidad de Teléfonos:</label>
            </div>
        </div>

        <div class="card-footer bg-light d-flex justify-content-center mt-3">
            <div class="btn-group">
              <!-- <button type="button" class="btn btn-outline-primary ml-2" @onclick="Nuevo"><span class="bi bi-plus"></span> Nuevo </button> -->
                <a type="button" href="/Cliente/Index/" class="btn btn-outline-danger"><span class="bi bi-arrow-bar-left"></span> Retroceder </a>
            </div>
        </div>
    </div>
</EditForm>

@code {
    public Clientes Cliente { get; set; } = new Clientes();
    public Telefonos NuevoTelefono { get; set; } = new Telefonos();
    public TiposTelefonos TipoTelefono { get; set; } = new TiposTelefonos(); 
    public List<TiposTelefonos> TiposTelefonos { get; set; } = new List<TiposTelefonos>();
    private bool Existe = false;

    

    protected override async Task OnInitializedAsync()
    {
        TiposTelefonos = await TiposTelefonoService.ObtenerEntidadesAsync();
    }

    public void Nuevo()
    {
        Cliente = new Clientes();
    }

    public async Task Buscar()
    {
        Existe = false;
        var ClienteEncontrado = await ClienteService.Buscar(Cliente.ClienteId);
        if (ClienteEncontrado != null)
        {
            Cliente = ClienteEncontrado;
        }
        else
        {
            Nuevo();
        }
    }

    public async Task<bool> Validar()
    {
        Existe = await ClienteService.Existe(Cliente.ClienteId);
        return !Existe;
    }

    public async Task Guardar()
    {
        if (!await Validar())
        {
            return;
        }
        var guardo = await ClienteService.Guardar(Cliente);
        if (guardo)
        {
            Nuevo();
        }
    }

    public async Task Eliminar()
    {
        var eliminado = await ClienteService.Eliminar(Cliente.ClienteId);
        Nuevo();
    }
    /*
    public void AgregarTelefono()
    {
        var tipoTelefonoDescripcion = TiposTelefonos.FirstOrDefault(t => t.Id == NuevoTelefono.TipoTelefonoId)?.Descripcion;

        Cliente.Telefonos.Add(new Telefonos
        {
            TipoTelefono = tipoTelefonoDescripcion,
            NumeroTelefono = NuevoTelefono.NumeroTelefono
        });

        NuevoTelefono = new Telefonos(); // Limpiar el formulario para agregar otro
    }

    public void EliminarTelefono(Telefonos telefono)
    {
        Cliente.Telefonos.Remove(telefono);
    }

    public void AplicarMascara(ChangeEventArgs e)
    {
        string telefono = e.Value.ToString();
        // Aquí puedes implementar la lógica para formatear el número de teléfono (809)-407-0696
    }*/
}
