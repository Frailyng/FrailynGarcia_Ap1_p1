@page "/RegistroClienteDetalle/Create"
@inject ClienteService ClienteService
@inject TiposTelefonoService TiposTelefonoService
@inject TelefonosService TelefonosService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<EditForm Model="Cliente" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card shadow-lg">
        <div class="card-header">
            <h5 class="card-title">Registro de Clientes</h5>
        </div>

        <div class="card-body">
            <!-- ClienteId con botón de búsqueda solo con ícono -->
            <div class="row mb-3">
                <div class="col-md-10">
                    <label for="ClienteId" class="form-label">Código Cliente:</label>
                    <InputNumber @bind-Value="Cliente.ClienteId" class="form-control" style="font-size: 0.8em;" />
                </div>
                <div class="col-md-2 d-flex align-items-end">
                    <button class="btn btn-outline-primary btn-sm" type="button" @onclick="Buscar">
                        <i class="bi bi-search"></i>
                    </button>
                </div>
            </div>

            <!-- Nombres -->
            <div class="mb-3">
                <label for="Nombres" class="form-label">Nombres:</label>
                <InputText @bind-Value="Cliente.Nombres" class="form-control" />
                <ValidationMessage For="@(() => Cliente.Nombres)" />
            </div>

            <!-- RNC -->
            <div class="mb-3">
                <label for="Rnc" class="form-label">RNC:</label>
                <InputText @bind-Value="Cliente.Rnc" class="form-control" />
                <ValidationMessage For="@(() => Cliente.Rnc)" />
            </div>

            <!-- Dirección -->
            <div class="mb-3">
                <label for="Direccion" class="form-label">Dirección:</label>
                <InputText @bind-Value="Cliente.Direccion" class="form-control" />
            </div>

            <!-- Límite de Crédito -->
            <div class="mb-3">
                <label for="LimiteCredito" class="form-label">Límite de Crédito:</label>
                <InputNumber @bind-Value="Cliente.LimiteCredito" class="form-control" />
            </div>

            <!-- Título: Teléfonos de Cliente dentro de borde verde -->
            <div class="p-3 border border-success rounded">
                <h5>Teléfonos de Cliente</h5>

                <!-- Filas para TipoTelefono y Telefono en una misma línea -->
                <div class="row mb-3 align-items-end">
                    <!-- Input para TipoTelefono con datos del servicio (ajustado en tamaño) -->
                    <div class="col-md-4">
                        <label for="TipoTelefono" class="form-label">Tipo de Teléfono:</label>
                        <InputSelect @bind-Value="TipoTelefono.TipoId" class="form-control form-control-sm">
                            <option value="">Seleccione un tipo</option>
                            @foreach (var tipo in TiposTelefonos)
                            {
                                <option value="@tipo.TipoId">@tipo.Descripcion</option>
                            }
                        </InputSelect>
                    </div>

                    <!-- Input para Telefono con máscara aplicada -->
                    <div class="col-md-4">
                        <label for="Telefono" class="form-label">Teléfono:</label>
                        <InputText id="telefonoInput" @bind-Value="NuevoTelefono.NumeroTelefono" class="form-control form-control-sm" @oninput="@(e => FormatearTelefono())" />
                    </div>

                    <!-- Botón para agregar teléfono en la misma línea -->
                    <div class="col-md-4 d-flex justify-content-start">
                        <button class="btn btn-primary btn-sm" @onclick="AgregarTelefono">
                            <i class="bi bi-plus"></i> Agregar
                        </button>
                    </div>
                </div>

                <!-- Tabla vacía inicialmente -->
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th>Tipo de Teléfono</th>
                            <th>Teléfono</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var telefono in ListaTelefonos)
                        {
                            <tr>
                                <td>@telefono.TipoTelefono</td> 
                                <td>@telefono.NumeroTelefono</td>
                                <td>
                                    <button class="btn btn-danger btn-sm" @onclick="() => EliminarTelefono(telefono)">
                                        Eliminar
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Cantidad de teléfonos -->
            <div class="mt-3">
                <label for="CantidadTelefonos" class="form-label">Cantidad de Teléfonos:</label>
                <span>@ListaTelefonos.Count</span>
            </div>
        </div>

        <div class="card-footer bg-light d-flex justify-content-center mt-3">
            <div class="btn-group">
               
                <button type="button" class="btn btn-outline-primary ml-2" @onclick="Nuevo"><span class="bi bi-plus"></span> Nuevo </button>
                <button type="submit" class="btn btn-outline-success ml-2"><span class="bi bi-save"></span> Guardar </button>
                <a type="button" href="/Cliente/Index/" class="btn btn-outline-danger"><span class="bi bi-arrow-bar-left"></span> Retroceder </a>
            </div>
        </div>
    </div>

</EditForm>

@code {
    public Clientes Cliente { get; set; } = new Clientes();
    public Telefonos NuevoTelefono { get; set; } = new Telefonos();
    public List<Telefonos> ListaTelefonos { get; set; } = new List<Telefonos>();
    public TiposTelefonos TipoTelefono { get; set; } = new TiposTelefonos(); 
    public List<TiposTelefonos> TiposTelefonos { get; set; } = new List<TiposTelefonos>();
    private bool Existe = false;

    protected override async Task OnInitializedAsync()
    {
        TiposTelefonos = await TiposTelefonoService.ObtenerEntidadesAsync();
    }

    public void Nuevo()
    {
        Cliente = new Clientes();
    }

    public async Task Buscar()
    {
        Existe = false;
        var ClienteEncontrado = await ClienteService.Buscar(Cliente.ClienteId);
        if (ClienteEncontrado != null)
        {
            Cliente = ClienteEncontrado;
        }
        else
        {
            Nuevo();
        }
    }

    public async Task<bool> Validar()
    {
        Existe = await ClienteService.Existe(Cliente.ClienteId);
        return !Existe;
    }

    public async Task Guardar()
    {
        if (!await Validar())
        {
            return;
        }
        var guardo = await ClienteService.Guardar(Cliente);
        if (guardo)
        {
            Nuevo();
        }
    }

    public async Task Eliminar()
    {
        var eliminado = await ClienteService.Eliminar(Cliente.ClienteId);
        Nuevo();
    }

    public async Task AgregarTelefono()
    {
        // Obtener la descripción del tipo de teléfono seleccionado
        var tipoTelefonoDescripcion = TiposTelefonos.FirstOrDefault(t => t.TipoId == TipoTelefono.TipoId)?.Descripcion;

        if (!string.IsNullOrWhiteSpace(tipoTelefonoDescripcion) && !string.IsNullOrWhiteSpace(NuevoTelefono.NumeroTelefono))
        {
            // Asignar la descripción del tipo de teléfono al nuevo teléfono
            NuevoTelefono.TipoTelefono = tipoTelefonoDescripcion;

            // Agregar el nuevo teléfono a la lista que se muestra en la tabla
            ListaTelefonos.Add(new Telefonos
                {
                    TipoTelefono = tipoTelefonoDescripcion,
                    NumeroTelefono = NuevoTelefono.NumeroTelefono
                });

            // Limpiar los campos
            TipoTelefono = new TiposTelefonos();
            NuevoTelefono = new Telefonos();
        }
    }

    public void EliminarTelefono(Telefonos telefono)
    {
        if (telefono != null)
        {
            // Remover el teléfono de la lista
            ListaTelefonos.Remove(telefono);

            // Asignar los valores del teléfono eliminado a los campos de entrada
            TipoTelefono.TipoId = TiposTelefonos.FirstOrDefault(t => t.Descripcion == telefono.TipoTelefono)?.TipoId ?? 0;
            NuevoTelefono.NumeroTelefono = telefono.NumeroTelefono;
        }
    }

    private void FormatearTelefono()
    {
        JSRuntime.InvokeVoidAsync("formatearTelefono", "telefonoInput"); // Se invoca JSRuntime aquí
    }
}

<script>
    function formatearTelefono(elementId) {
        var input = document.getElementById(elementId);
        var value = input.value.replace(/\D/g, '');
        var formattedValue = '';

        if (value.length > 0) {
            formattedValue = '(' + value.substring(0, 3);
        }
        if (value.length >= 4) {
            formattedValue += ')-' + value.substring(3, 6);
        }
        if (value.length >= 7) {
            formattedValue += '-' + value.substring(6, 10);
        }

        input.value = formattedValue;
    }
</script>
