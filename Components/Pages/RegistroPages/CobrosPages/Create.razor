@page "/Cobro/Create"
@inject CobroService CobroService
@inject DeudorService DeudorService
@inject PrestamoService PrestamoService
@rendermode InteractiveServer

<EditForm Model="Cobro" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card shadow-lg border-0 rounded" style="background-color: #f8f9fa;">
        <div class="card-header bg-primary text-white" style="text-align: center;">
            <h3> <i class="fas fa-clipboard-list"></i> Cobro</h3>
        </div>

        <div class="card-body">

            <!-- CobroId -->
            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="CobroId" class="form-label">CobroId:</label>
                    <div class="input-group">
                        <div style="width: 40%; height: 1em;">
                            <InputNumber @bind-Value="Cobro.CobroId" class="form-control" style="font-size: 0.8em;" aria-describedby="BotonBuscar" />
                        </div>
                    </div>
                </div>
            </div>

            <!-- Fecha -->
            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="Fecha" class="form-label">Fecha:</label>
                    <div class="input-group">
                        <InputDate @bind-Value="Cobro.Fecha" class="form-control" style="font-size: 0.8em;" />
                    </div>
                </div>
            </div>

            <!-- Deudor (Cargar desde Deudores) -->
            <div class="mb-3">
                <label for="DeudorId" class="form-label">Deudor:</label>
                <InputSelect @bind-Value="Cobro.DeudorId" class="form-control" @onchange="CargarPrestamosDeudor">
                    <option value="">Seleccione un Deudor</option>
                    @foreach (var deudor in ListaDeudores)
                    {
                        <option value="@deudor.DeudorId">@deudor.Nombres</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => Cobro.DeudorId)" />
            </div>

            <!-- Monto del Préstamo Seleccionado -->
            <div class="mb-3">
                <label for="Monto" class="form-label">Monto:</label>
                <InputNumber @bind-Value="Cobro.Monto" class="form-control" readonly />
                <ValidationMessage For="@(() => Cobro.Monto)" />
            </div>

            <!-- Tabla para mostrar préstamos del deudor seleccionado -->
            @if (ListaPrestamosDeudor != null && ListaPrestamosDeudor.Count > 0)
            {
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Concepto</th>
                            <th>Monto</th>
                            <th>Balance</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var prestamo in ListaPrestamosDeudor)
                        {
                            <tr>
                                <td>@prestamo.Conceptos</td>
                                <td>@prestamo.Montos</td>
                                <td>@prestamo.Balance</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>

    </div>

        <div class="card-footer bg-light d-flex justify-content-center mt-3">
            <div class="btn-group">
                <button type="button" class="btn btn-outline-primary ml-2" @onclick="Nuevo"><span class="bi bi-plus"></span> Nuevo </button>
                <button type="submit" class="btn btn-outline-success ml-2"><span class="bi bi-floppy mt-3"></span> Guardar </button>
                <a type="button" href="/Cobro/Index/" class="btn btn-outline-danger"><span class="bi bi-arrow-bar-left"></span> Retroceder </a>
            </div>
        </div>

</EditForm>

@code {
    public Cobros Cobro { get; set; } = new Cobros();
    public List<Deudores> ListaDeudores { get; set; } = new List<Deudores>();
    public List<Prestamos> ListaPrestamosDeudor { get; set; } = new List<Prestamos>(); // Prestamos del deudor seleccionado

    protected override async Task OnInitializedAsync()
    {
        ListaDeudores = await DeudorService.ObtenerEntidadesAsync();

        if (Cobro.Fecha == default(DateOnly))
        {
            Cobro.Fecha = DateOnly.FromDateTime(DateTime.Now);
        }
    }

    public void Nuevo()
    {
        Cobro = new Cobros();
    }

    public async Task CargarPrestamosDeudor(ChangeEventArgs e)
    {
        int deudorId = int.Parse(e.Value.ToString());
        ListaPrestamosDeudor = await PrestamoService.ObtenerPrestamosPorDeudor(deudorId); // Cargar préstamos asociados al deudor
        Cobro.Monto = 0; // Limpiar monto hasta seleccionar un préstamo
    }

    public async Task Guardar()
    {
        // Validar y guardar el cobro
        bool guardo = await CobroService.Guardar(Cobro);
        if (guardo)
        {
            Nuevo(); // Limpiar el formulario después de guardar
        }
    }
}

