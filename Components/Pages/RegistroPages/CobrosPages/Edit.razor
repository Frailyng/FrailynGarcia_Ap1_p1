@page "/Cobro/Edit/{CobroId:int}"
@inject CobrosService CobroService
@rendermode InteractiveServer

<EditForm Model="Cobro" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="card shadow-lg border-0 rounded" style="background-color: #f8f9fa;">
        <div class="card-header bg-primary text-white" style="text-align: center;">
            <h3><i class="fas fa-clipboard-list"></i> Editar Cobros</h3>
        </div>

        <div class="card-body">
            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="CobroId" class="form-label">CobroId:</label>
                    <div class="input-group">
                        <div style="width: 40%; height: 1em;">
                            <InputNumber @bind-Value="Cobro.CobroId" class="form-control" style="font-size: 0.8em;" aria-describedby="BotonBuscar" />
                        </div>
                    </div>
                </div>
            </div>

            <div class="mb-3">
                <label for="DeudorId" class="form-label">DeudorId:</label>
                <InputNumber @bind-Value="Cobro.DeudorId" class="form-control" />
                <ValidationMessage For="@(() => Cobro.DeudorId)" />
            </div>

            <div class="mb-3">
                <label for="Fecha" class="form-label">Fecha:</label>
                <InputDate @bind-Value="Cobro.Fecha" class="form-control" />
                <ValidationMessage For="@(() => Cobro.Fecha)" />
            </div>

            <div class="mb-3">
                <label for="Monto" class="form-label">Monto:</label>
                <InputNumber @bind-Value="Cobro.Monto" class="form-control" />
                <ValidationMessage For="@(() => Cobro.Monto)" />
            </div>
        </div>

        <div class="card-footer bg-light d-flex justify-content-center mt-3">
            <div class="btn-group">
                <button type="button" class="btn btn-outline-primary ml-2" @onclick="Nuevo">
                    <span class="bi bi-plus"></span> Nuevo
                </button>
                <button type="submit" class="btn btn-outline-success ml-2">
                    <span class="bi bi-floppy mt-3"></span> Guardar
                </button>
                <a type="button" href="/Cobro/Index/" class="btn btn-outline-danger">
                    <span class="bi bi-arrow-bar-left"></span> Retroceder
                </a>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int? CobroId { get; set; }
    public Cobros Cobro { get; set; } = new Cobros();
    private bool Existe = false;

    protected override async Task OnInitializedAsync()
    {
        if (CobroId.HasValue)
        {
            Cobro.CobroId = CobroId.Value;
            await Buscar();
        }
    }

    public void Nuevo()
    {
        Cobro = new Cobros();
        Existe = false;
    }

    public async Task Buscar()
    {
        var CobroEncontrado = await CobroService.Buscar(Cobro.CobroId);
        if (CobroEncontrado != null)
        {
            Cobro = CobroEncontrado;
        }
    }

    public async Task<bool> Validar()
    {
        // Aquí puedes agregar la lógica de validación que necesites
        return true; // Retorna true si la validación es exitosa
    }

    public async Task Guardar()
    {
        if (!await Validar())
        {
            return;
        }
        var guardo = await CobroService.Guardar(Cobro);
        if (guardo)
        {
            Nuevo();
        }
    }

    public async Task Eliminar()
    {
        var eliminado = await CobroService.Eliminar(Cobro.CobroId);
        Nuevo();
    }
}

