@page "/Prestamo/Create"
@inject PrestamoService PrestamoService
@inject DeudorService DeudorService
@rendermode InteractiveServer

<EditForm Model="Prestamo" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card shadow-lg border-0 rounded" style="background-color: #f8f9fa;">
        <div class="card-header bg-primary text-white" style="text-align: center;">
            <h3> <i class="fas fa-clipboard-list"></i> Prestamo</h3>
        </div>

        <div class="card-body">

            @* PrestamoId *@
            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="PrestamosId" class="form-label">PrestamosId:</label>
                    <div class="input-group">
                        <div style="width: 40%; height: 1em;">
                            <InputNumber @bind-Value="Prestamo.PrestamosId" class="form-control" style="font-size: 0.8em;" aria-describedby="BotonBuscar" />
                        </div>
                    </div>
                </div>
            </div>

            <!-- Deudor (Cargar desde Deudores) -->
            <div class="mb-3">
                <label for="Nombres" class="form-label">Nombres:</label>
                <InputSelect @bind-Value="Prestamo.Deudores" class="form-control">
                    <option value="">Seleccione un Deudor</option>
                    @foreach (var Deudor in ListaDeudores)
                    {
                        <option value="@Deudor.Nombres">@Deudor.Nombres</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => Deudor.Nombres)" />
            </div>

            @* Conceptos *@
            <div class="mb-3">
                <label for="Conceptos" class="form-label">Conceptos:</label>
                <InputText @bind-Value="Prestamo.Conceptos" class="form-control" />
                <ValidationMessage For="@(() => Prestamo.Conceptos)" />
            </div>

            @* Montos *@
            <div class="mb-3">
                <label for="Montos" class="form-label">Montos:</label>
                <InputNumber @bind-Value="Prestamo.Montos" class="form-control" />
                <ValidationMessage For="@(() => Prestamo.Montos)" />
            </div>

        </div>

        <div class="card-footer bg-light d-flex justify-content-center mt-3">
            <div class="btn-group">
                <button type="button" class="btn btn-outline-primary ml-2" @onclick="Nuevo"><span class="bi bi-plus"></span> Nuevo </button>
                <button type="submit" class="btn btn-outline-success ml-2"><span class="bi bi-floppy mt-3"></span> Guardar </button>
                <a type="button" href="/Prestamo/Index/" class="btn btn-outline-danger"><span class="bi bi-arrow-bar-left"></span> Retroceder </a>
            </div>
        </div>
    </div>
</EditForm>

@code {
    public int Id { get; set; }
    public Prestamos Prestamo { get; set; } = new Prestamos();
    public Deudores Deudor { get; set; } = new Deudores();
    public List<Deudores> ListaDeudores { get; set; } = new List<Deudores>();
    private bool Existe = false;

    protected override async Task OnInitializedAsync()
    {
        ListaDeudores = await DeudorService.ObtenerEntidadesAsync();
    }

    public void Nuevo()
    {
        Prestamo = new Prestamos();
        Existe = false;
    }

    public async Task Buscar()
    {
        Existe = false;
        var PrestamoEcontrado = await PrestamoService.Buscar(Prestamo.PrestamosId);
        if (PrestamoEcontrado != null)
        {
            Prestamo = PrestamoEcontrado;
        }
        else
        {
            Nuevo();
        }
    }

    public async Task<bool> Validar()
    {
        Existe = await PrestamoService.Existe(Prestamo.Deudores);
        return !Existe;
    }

    public async Task Guardar()
    {
        if (!await Validar())
        {
            return;
        }
        var guardo = await PrestamoService.Guardar(Prestamo);
        if (guardo)
        {
            Nuevo();
        }
    }

    public async Task Eliminar()
    {
        var eliminado = await PrestamoService.Eliminar(Prestamo.PrestamosId);
        Nuevo();
    }
}
