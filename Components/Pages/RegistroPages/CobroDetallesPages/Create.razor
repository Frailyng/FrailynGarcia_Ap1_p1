@page "/CobroDetalle/Create"
@inject CobroDetalleService CobroDetalleService
@inject CobroService CobroService
@inject PrestamoService PrestamoService
@rendermode InteractiveServer

<EditForm Model="CobroDetalle" OnValidSubmit="Guardar">

    <DataAnnotationsValidator />
    <div class="card shadow-lg border-0 rounded" style="background-color: #f8f9fa;">
        <div class="card-header bg-primary text-white" style="text-align: center;">
            <h3><i class="fas fa-clipboard-list"></i> Detalle de Cobro</h3>
        </div>

        <div class="card-body">

            @* DetalleId *@
            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="DetalleId" class="form-label">DetalleId:</label>
                    <InputNumber @bind-Value="CobroDetalle.DetalleId" class="form-control" style="font-size: 0.8em;" />
                </div>
            </div>

            @* CobroId (Cargar desde Cobros) *@
            <div class="mb-3">
                <label for="CobroId" class="form-label">CobroId:</label>
                <InputSelect @bind-Value="CobroDetalle.CobroId" class="form-control">
                    <option value="">Seleccione un Cobro</option>
                    @foreach (var cobro in ListaCobros)
                    {
                        <option value="@cobro.CobroId">@cobro.CobroId</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => CobroDetalle.CobroId)" />
            </div>

            @* PrestamoId (Cargar desde Prestamos) *@
            <div class="mb-3">
                <label for="PrestamoId" class="form-label">PrestamoId:</label>
                <InputSelect @bind-Value="CobroDetalle.PrestamoId" class="form-control">
                    <option value="">Seleccione un Prestamo</option>
                    @foreach (var prestamo in ListaPrestamos)
                    {
                        <option value="@prestamo.PrestamosId">@prestamo.PrestamosId</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => CobroDetalle.PrestamoId)" />
            </div>

            @* ValorCobrado *@
            <div class="mb-3">
                <label for="ValorCobrado" class="form-label">Valor Cobrado:</label>
                <InputNumber @bind-Value="CobroDetalle.ValorCobrado" class="form-control" />
                <ValidationMessage For="@(() => CobroDetalle.ValorCobrado)" />
            </div>
        </div>

        <div class="card-footer bg-light d-flex justify-content-center mt-3">
            <div class="btn-group">
                <button type="button" class="btn btn-outline-primary ml-2" @onclick="Nuevo"><span class="bi bi-plus"></span> Nuevo </button>
                <button type="submit" class="btn btn-outline-success ml-2"><span class="bi bi-floppy mt-3"></span> Guardar </button>
                <a type="button" href="/CobroDetalle/Index/" class="btn btn-outline-danger"><span class="bi bi-arrow-bar-left"></span> Retroceder </a>
            </div>
        </div>
    </div>
</EditForm>

@code {
    public CobrosDetalle CobroDetalle { get; set; } = new CobrosDetalle();
    public List<Cobros> ListaCobros { get; set; } = new List<Cobros>();
    public List<Prestamos> ListaPrestamos { get; set; } = new List<Prestamos>();

    protected override async Task OnInitializedAsync()
    {
        ListaCobros = await CobroService.Listar(p => true);
        ListaPrestamos = await PrestamoService.Listar(p => true);
    }

    public void Nuevo()
    {
        CobroDetalle = new CobrosDetalle();
    }

    public async Task Guardar()
    {
        await CobroDetalleService.Guardar(CobroDetalle);
        Nuevo();
    }
}
